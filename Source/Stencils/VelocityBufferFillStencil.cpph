#include "StdAfx.hpp"

#include "Definitions.hpp"
#include "StencilFunctions.hpp"
#include "VelocityBufferFillStencil.hpp"

template <class FlowFieldType>
Stencils::VelocityBufferFillStencil<FlowFieldType>::VelocityBufferFillStencil(
  const Parameters&      parameters,
  std::vector<RealType>& left,
  std::vector<RealType>& right,
  std::vector<RealType>& top,
  std::vector<RealType>& bottom,
  std::vector<RealType>& front,
  std::vector<RealType>& back
):
  BoundaryStencil<FlowFieldType>(parameters),
  Left_(left),
  Right_(right),
  Top_(top),
  Bottom_(bottom),
  Front_(front),
  Back_(back) {}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyLeftWall(FlowFieldType& flowField, int i, int j) {
  Left_.at(j) = flowField.getVelocity().getVector(i + 2, j)[0];
  Left_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3 + j
  ) = flowField.getVelocity().getVector(i + 2, j)[1];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyRightWall(FlowFieldType& flowField, int i, int j) {
  Right_.at(j) = flowField.getVelocity().getVector(i - 2, j)[0];
  Right_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3 + j
  ) = flowField.getVelocity().getVector(i - 1, j)[1];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyBottomWall(FlowFieldType& flowField, int i, int j) {
  Bottom_.at(i) = flowField.getVelocity().getVector(i, j + 2)[0];
  Bottom_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3 + i
  ) = flowField.getVelocity().getVector(i, j + 2)[1];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyTopWall(FlowFieldType& flowField, int i, int j) {
  Top_.at(i) = flowField.getVelocity().getVector(i, j - 1)[0];
  Top_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3 + i
  ) = flowField.getVelocity().getVector(i, j - 2)[1];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyLeftWall(FlowFieldType& flowField, int i, int j, int k) {
  Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  ) = flowField.getVelocity().getVector(i + 2, j, k)[0];
  Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i + 2, j, k)[1];
  Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i + 2, j, k)[2];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyRightWall(FlowFieldType& flowField, int i, int j, int k) {
  Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  ) = flowField.getVelocity().getVector(i - 2, j, k)[0];
  Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i - 1, j, k)[1];
  Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i - 1, j, k)[2];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyBottomWall(
  FlowFieldType& flowField, int i, int j, int k
) {
  Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  ) = flowField.getVelocity().getVector(i, j + 2, k)[0];
  Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i, j + 2, k)[1];
  Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i, j + 2, k)[2];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyTopWall(FlowFieldType& flowField, int i, int j, int k) {
  Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  ) = flowField.getVelocity().getVector(i, j - 1, k)[0];
  Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i, j - 2, k)[1];
  Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  ) = flowField.getVelocity().getVector(i, j - 1, k)[2];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyFrontWall(FlowFieldType& flowField, int i, int j, int k) {
  Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
  ) = flowField.getVelocity().getVector(i, j, k + 2)[0];
  Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  ) = flowField.getVelocity().getVector(i, j, k + 2)[1];
  Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  ) = flowField.getVelocity().getVector(i, j, k + 2)[2];
}

template <class FlowFieldType>
void Stencils::VelocityBufferFillStencil<FlowFieldType>::applyBackWall(FlowFieldType& flowField, int i, int j, int k) {
  Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
  ) = flowField.getVelocity().getVector(i, j, k - 1)[0];
  Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  ) = flowField.getVelocity().getVector(i, j, k - 1)[1];
  Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  ) = flowField.getVelocity().getVector(i, j, k - 2)[2];
}
