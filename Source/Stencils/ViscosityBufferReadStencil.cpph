#include "StdAfx.hpp"

#include "Definitions.hpp"
#include "StencilFunctions.hpp"
#include "TurbulentFlowField.hpp"
#include "ViscosityBufferReadStencil.hpp"

template <class FlowFieldType>
Stencils::ViscosityBufferReadStencil<FlowFieldType>::ViscosityBufferReadStencil(
  const Parameters&      parameters,
  std::vector<RealType>& Left,
  std::vector<RealType>& Right,
  std::vector<RealType>& Top,
  std::vector<RealType>& Bottom,
  std::vector<RealType>& Front,
  std::vector<RealType>& Back
):
  BoundaryStencil<FlowFieldType>(parameters),
  Left_(Left),
  Right_(Right),
  Top_(Top),
  Bottom_(Bottom),
  Front_(Front),
  Back_(Back) {}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyLeftWall(FlowFieldType& FlowField, int i, int j) {
  FlowField.getnuT().getScalar(i + 1, j) = Left_.at(j);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyRightWall(FlowFieldType& FlowField, int i, int j) {
  FlowField.getnuT().getScalar(i, j) = Right_.at(j);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyBottomWall(FlowFieldType& FlowField, int i, int j) {
  FlowField.getnuT().getScalar(i, j + 1) = Bottom_.at(i);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyTopWall(FlowFieldType& FlowField, int i, int j) {
  FlowField.getnuT().getScalar(i, j) = Top_.at(i);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyLeftWall(FlowFieldType& FlowField, int i, int j, int k) {
  FlowField.getnuT().getScalar(
    i + 1, j, k
  ) = Left_.at(j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyRightWall(
  FlowFieldType& FlowField, int i, int j, int k
) {
  FlowField.getnuT().getScalar(
    i, j, k
  ) = Right_.at(j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyBottomWall(
  FlowFieldType& FlowField, int i, int j, int k
) {
  (FlowField.getnuT().getScalar(i, j + 1, k)
  ) = Bottom_.at(i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyTopWall(FlowFieldType& FlowField, int i, int j, int k) {
  FlowField.getnuT().getScalar(
    i, j, k
  ) = Top_.at(i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyFrontWall(
  FlowFieldType& FlowField, int i, int j, int k
) {
  FlowField.getnuT().getScalar(
    i, j, k + 1
  ) = Front_.at(i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j);
}

template <class FlowFieldType>
void Stencils::ViscosityBufferReadStencil<FlowFieldType>::applyBackWall(FlowFieldType& FlowField, int i, int j, int k) {
  FlowField.getnuT().getScalar(
    i, j, k
  ) = Back_.at(i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j);
}
