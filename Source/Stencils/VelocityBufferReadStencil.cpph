#include "StdAfx.hpp"

#include "Definitions.hpp"
#include "StencilFunctions.hpp"
#include "VelocityBufferReadStencil.hpp"

template <class FlowFieldType>
Stencils::VelocityBufferReadStencil<FlowFieldType>::VelocityBufferReadStencil(
  const Parameters&     parameters,
  std::vector<RealType> Left,
  std::vector<RealType> Right,
  std::vector<RealType> Top,
  std::vector<RealType> Bottom,
  std::vector<RealType> Front,
  std::vector<RealType> Back
):
  BoundaryStencil<FlowFieldType>(parameters),
  Left_(Left),
  Right_(Right),
  Top_(Top),
  Bottom_(Bottom),
  Front_(Front),
  Back_(Back) {}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyLeftWall(FlowFieldType& flowField, int i, int j) {
  flowField.getVelocity().getVector(i, j)[0]     = Left_.at(j);
  flowField.getVelocity().getVector(i + 1, j)[1] = Left_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3 + j
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyRightWall(FlowFieldType& flowField, int i, int j) {
  flowField.getVelocity().getVector(i, j)[0] = Right_.at(j);
  flowField.getVelocity().getVector(i, j)[1] = Right_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3 + j
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyBottomWall(FlowFieldType& flowField, int i, int j) {
  flowField.getVelocity().getVector(i, j + 1)[0] = Bottom_.at(i);
  flowField.getVelocity().getVector(i, j)[1]     = Bottom_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3 + i
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyTopWall(FlowFieldType& flowField, int i, int j) {
  flowField.getVelocity().getVector(i, j)[0] = Top_.at(i);
  flowField.getVelocity().getVector(i, j)[1] = Top_.at(
    BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3 + i
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyLeftWall(FlowFieldType& flowField, int i, int j, int k) {
  flowField.getVelocity().getVector(i, j, k)[0] = Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  );
  flowField.getVelocity().getVector(i + 1, j, k)[1] = Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
  flowField.getVelocity().getVector(i + 1, j, k)[2] = Left_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyRightWall(FlowFieldType& flowField, int i, int j, int k) {
  flowField.getVelocity().getVector(i, j, k)[0] = Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  );
  flowField.getVelocity().getVector(i, j, k)[1] = Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
  flowField.getVelocity().getVector(i, j, k)[2] = Right_.at(
    j * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyBottomWall(
  FlowFieldType& flowField, int i, int j, int k
) {
  flowField.getVelocity().getVector(i, j + 1, k)[0] = Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  );
  flowField.getVelocity().getVector(i, j, k)[1] = Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
  flowField.getVelocity().getVector(i, j + 1, k)[2] = Bottom_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyTopWall(FlowFieldType& flowField, int i, int j, int k) {
  flowField.getVelocity().getVector(i, j, k)[0] = Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
  );
  flowField.getVelocity().getVector(i, j, k)[1] = Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
  flowField.getVelocity().getVector(i, j, k)[2] = Top_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3) + k
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[2] + 3)
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyFrontWall(FlowFieldType& flowField, int i, int j, int k) {
  flowField.getVelocity().getVector(i, j, k + 1)[0] = Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
  );
  flowField.getVelocity().getVector(i, j, k + 1)[1] = Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  );
  flowField.getVelocity().getVector(i, j, k)[2] = Front_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  );
}

template <class FlowFieldType>
void Stencils::VelocityBufferReadStencil<FlowFieldType>::applyBackWall(FlowFieldType& flowField, int i, int j, int k) {
  flowField.getVelocity().getVector(i, j, k)[0] = Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
  );
  flowField.getVelocity().getVector(i, j, k)[1] = Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3
      ) * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  );
  flowField.getVelocity().getVector(i, j, k)[2] = Back_.at(
    i * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3) + j
    + 2 * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[0] + 3)
        * (BoundaryStencil<FlowFieldType>::parameters_.parallel.localSize[1] + 3)
  );
}
